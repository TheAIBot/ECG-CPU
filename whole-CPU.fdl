dp alu(in a, b : ns(32); 
	   in select : ns(2); 
	   out ALUout : ns(32)) {
	always {
		ALUout = select == 0b00 ? a + b :
				 select == 0b01 ? a - b :
				 select == 0b10 ? a >> b :
					 		 	  a & b;
	}
}
dp decoder(in op : ns(3);
		   out pcJMP : ns(1);
		   out ALUInstruction  : ns(2);
		   out useIntermediate : ns(1);
		   out storeALU : ns(1))
{
	sig x : ns(5);
	always
	{
		x = (op == 0b000) ? 0b00001 :
			(op == 0b001) ? 0b01101 :
			(op == 0b010) ? 0b00101 :
			(op == 0b011) ? 0b00011 :
			(op == 0b100) ? 0b01011 :
			(op == 0b101) ? 0b00000 :
			(op == 0b110) ? 0b00000 :
							0b10000;
		pcJMP = x[0];
		ALUInstruction = x[1:2];
		useIntermediate = x[3];
		storeALU = x[4];
	}
}
ipblock instmem(in address : ns(5);
	in wr,rd : ns(1);
	in idata : ns(32);
	out odata : ns(32))
{
	iptype "ram";
	ipparm "size=64";
	ipparm "wl=32";
	ipparm "file=program.txt";
}

dp PC(in JMP : ns(26);
	  in doJMP : ns(1);
	  out pc_out : ns(32))
{
	reg b : ns(32);
	always{
		b = pc_out;
		pc_out = doJMP ? (ns(32))JMP : b + 1;
	}
}


dp fetch(in address : ns(5); out odata : ns(32))
{
	reg idata : ns(32);
	
	use instmem(address, 0, 1, idata, odata);
}
dp mux_ALU_b(in b : ns(32);
			 in intermediate : ns(23);
			 in useIntermediate : ns(1);
			 out correctB : ns(32))
{
	always
	{
		correctB = useIntermediate ? (ns(32))intermediate : b;
	}
}
dp register(in asel, bsel : ns(3); 
			in storeenable : ns(1);
			in storesel : ns(3);
			in storedata : tc(32);
			out a, b : tc(32)) {
	reg r0 : tc(32);
	reg r1 : tc(32);
	reg r2 : tc(32);
	reg r3 : tc(32);
	reg r4 : tc(32);
	reg r5 : tc(32);
	reg r6 : tc(32);
	reg r7 : tc(32);

	always {
		a = asel == 0b000 ? r0 : 
			asel == 0b001 ? r1 : 
			asel == 0b010 ? r2 : 
			asel == 0b011 ? r3 : 
			asel == 0b100 ? r4 : 
			asel == 0b101 ? r5 : 
			asel == 0b110 ? r6 : 
						  r7;

		b = bsel == 0b000 ? r0 : 
			bsel == 0b001 ? r1 : 
			bsel == 0b010 ? r2 : 
			bsel == 0b011 ? r3 : 
			bsel == 0b100 ? r4 : 
			bsel == 0b101 ? r5 : 
			bsel == 0b110 ? r6 : 
						  r7;

		r1 = storeenable == 0 ?  r1 : storesel == 0b001 ?  storedata : r1;
		r2 = storeenable == 0 ?  r1 : storesel == 0b010 ?  storedata : r2;
		r3 = storeenable == 0 ?  r1 : storesel == 0b011 ?  storedata : r3;
		r4 = storeenable == 0 ?  r1 : storesel == 0b100 ?  storedata : r4;
		r5 = storeenable == 0 ?  r1 : storesel == 0b101 ?  storedata : r5;
		r6 = storeenable == 0 ?  r1 : storesel == 0b110 ?  storedata : r6;
		r7 = storeenable == 0 ?  r1 : storesel == 0b111 ?  storedata : r7;

	}
}
system CPU
{
	PC(odata[6:31], pcJMP, pc_out);
	fetch(pc_out, odata);

	decoder(odata[0:2], pcJMP, ALUInstruction, useIntermediate, storeALU);

	register(odata[6:8], odata[9:11], storeALU, odata[3:5], ALUout, a, b);
	mux_ALU_b(b, odata[9:31], useIntermediate, correctB);
	alu(a, correctB, ALUInstruction, ALUout);
}
