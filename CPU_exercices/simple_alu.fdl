

dp alu(in A, B:tc(32); in select : ns(2); out R:tc(32)) {
	always {
		R = select == 0b00 ? A - B :
			select == 0b01 ? B - A :
			select == 0b10 ? A :
							 B;
	}
}

dp testAlu(out A, B:tc(32); out select : ns(2); in R:tc(32)) {
	always{$display($dec, "Cycle:", $cycle, ", A=", A , ", B=", B , ", R=", R);}
	sfg test_0 { A=12; B=8; select = 0b00;}
	sfg test_1 { A=12; B=8; select = 0b01;}
	sfg test_2 { A=12; B=8; select = 0b10;}
	sfg test_3 { A=12; B=8; select = 0b11;}
}
// state machine to control testbench
fsm f_testbench(testAlu){
	initial s0; // begin with state s0
	state s1, s2, s3; // other states are: s1, s2
	@s0 (test_0) -> s1; // run test_0 and go to s1
	@s1 (test_1) -> s2; // run test_1 and go to s2
	@s2 (test_2) -> s3; // run test_2 and go to s0
	@s3 (test_3) -> s0; // run test_2 and go to s0
}
system myFirstSystem {
	alu(A, B, select, R);
	testAlu(A, B, select, R);
}

