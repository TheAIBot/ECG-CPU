ipblock circularArray(in address : ns(32);
                      in wr,rd : ns(1);
                      in idata : tc(32);
	              out odata : tc(32))
{
	iptype "ram";
	ipparm "size=32";
	ipparm "wl=32";
}

dp mwiFilter	(in datain : tc(32);
		 in datainrdy : ns(1);
		 out dataout : tc(32);
		 out dataoutrdy : ns(1))
{
	//The registers used in calculations:
	reg difference : tc(32); //Reg
	reg formerValue : tc(32); //R6 
	reg arrayIndex : ns(5); //R1
	reg sum : tc(32); //R3
	
	reg hasDataIn : ns (1); //Used by the final state machine	

	sig updatedSum : tc(32); //As the name says
	
	//For the connection to the memory block/circular array
	sig circArrayOut : tc(32);
	sig indexPP : ns(5);	
	sig writeCircularArray : ns(1);
	sig readCircularArray : ns(1);
	use circularArray(indexPP,writeCircularArray,readCircularArray, datain, circArrayOut);
	
	//Though it stalls, it calculates the values for cycle 1.
	sfg stall{		
		//Calculates the difference from the former value on the place in teh circular array, and the new input. 
		difference = datain - formerValue; 

		//Goes to the next cycle if datainrdy = 1 ((*) same as the other UCP versions)
		hasDataIn = datainrdy; 
		
		//Writes datain to the circular array at indexPP=arrayIndex.
		writeCircularArray = 1;
		readCircularArray = 0;
		indexPP = arrayIndex;

		//No output is ready.
		dataoutrdy = 0;
		dataout = 0;
	}
	sfg addSumShift{ //Calculates the result of the UCP and gives it as an output.
		updatedSum = sum + difference; //Says it on the tin
		sum = updatedSum;

		//Bitshifts the updated sum by 5, and gives it as an output.
		dataout = (tc(32))updatedSum[5:31]; 
		dataoutrdy = 1;

		//Reads the next element in the circular array, and updates the current index.
		indexPP = arrayIndex + 1;
		arrayIndex = indexPP;		
		writeCircularArray = 0;
		readCircularArray = 1;
	}
	sfg setLoadedValue{ //Gets ready for a new input.
		formerValue = circArrayOut; //The output with the delay of one cycle, is now ready.
		writeCircularArray = 0;
		readCircularArray = 0;
		indexPP = arrayIndex;
		hasDataIn = 0;		
		dataoutrdy = 0;
		dataout = 0;
	}
	always
	{	
		//$display($dec, "Cycle = ", $cycle);
		//$display($dec, "In UCP, datain = ", datain, ", datainrdy = ", datainrdy, ", dataout = ", dataout, ", dataoutrdy = ", dataoutrdy);
		//$display($dec, "Also in UCP, hasDataIn = ", hasDataIn, ", difference = ", difference, ", sum = ", sum, ", arrayindex = ", arrayIndex);
	}
}

fsm ucp(mwiFilter){
	initial sStall;
	state sCycle2;
	
	@sStall  	if(hasDataIn) 	then		(addSumShift) 		-> sCycle2;
		 	else				(stall)        		-> sStall;
	@sCycle2 					(setLoadedValue)  	-> sStall; //And ready for the next round of inputs.
}














