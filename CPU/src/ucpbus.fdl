ipblock circularArrayBus(in address : ns(32);
                      in wr,rd : ns(1);
                      in idata : tc(32);
	              out odata : tc(32))
{
	iptype "ram";
	ipparm "size=32";
	ipparm "wl=32";
}

dp mwiFilterBus(	 in datain : tc(32);
			 in datainrdy : ns(1);
			 out dataout : tc(32);
			 out dataoutrdy : ns(1);
			 in stall : ns(1))
{
	reg difference : tc(32);
	reg formerValue : tc(32);
	reg arrayIndex : ns(5);
	reg sum : tc(32);
	reg stallReg : ns(1);
	reg dataoutReg : tc(32); //Added(*)
	sig circArrayOut : tc(32);
	sig indexPP : ns(5);	
	reg hasDataIn : ns (1);
	sig writeCircularArray : ns(1);
	sig readCircularArray : ns(1);
	sig updatedSum : tc(32);
	use circularArrayBus(indexPP,writeCircularArray,readCircularArray, datain, circArrayOut);
	//always{
		//$display("");//newline
		//$display($dec, "Cycle = ", $cycle);
		//$display($dec, "    In UCP, datain = ", datain, ", datainrdy = ", datainrdy, ", dataout = ", dataout, ", dataoutrdy = ", dataoutrdy);
		//$display($dec, "    Also in UCP, hasDataIn = ", hasDataIn, ", difference = ", difference, ", sum = ", sum, ", arrayindex = ", arrayIndex);
	//}
	sfg stall{ //Though it stalls, it calculates the values for cycle 1.
		hasDataIn = datainrdy;
		difference = datain - formerValue;
		writeCircularArray = 1;
		readCircularArray = 0;
		indexPP = arrayIndex;
		dataoutrdy = 0;
		dataoutReg = 0;
		dataout = dataoutReg;
		stallReg = stall;
	}
	sfg addSumShift{
		updatedSum = sum + difference;
		dataout = (tc(32))updatedSum[5:31];
		dataoutReg = (tc(32))updatedSum[5:31];
		sum = updatedSum;
		dataoutrdy = stallReg == 0;
		indexPP = arrayIndex + 1;
		arrayIndex = indexPP;		
		writeCircularArray = 0;
		readCircularArray = 1;
		stallReg = stall;
	}
	sfg setLoadedValue{
		formerValue = circArrayOut;
		writeCircularArray = 0;
		readCircularArray = 0;
		indexPP = arrayIndex;
		hasDataIn = 0;		
		dataoutrdy = stallReg == 0;
		dataout = dataoutReg;
		stallReg = stall;
	}
	sfg awaithandshake{
		dataoutrdy = stallReg == 0;
		dataout = dataoutReg;
		hasDataIn = hasDataIn;
		difference = difference;
		stallReg = stall;

		//circularArrayBus needs to get it's inputs
		indexPP = arrayIndex;
		writeCircularArray = 0;
		readCircularArray = 0;
	}

	always
	{			
		$display($dec, "Cycle = ", $cycle);
		$display($dec, "In UCP, datain = ", datain, ", datainrdy = ", datainrdy, ", dataout = ", dataout, ", dataoutrdy = ", dataoutrdy, ", stall = ", stall);
		$display($dec, "Also in UCP, hasDataIn = ", hasDataIn, ", difference = ", difference, ", sum = ", sum, ", arrayindex = ", arrayIndex);
	}
}

fsm ucpBus(mwiFilterBus){
	initial sStall;
	state sCycle2;
	
	@sStall  if(hasDataIn)     then 		(addSumShift)  		-> sCycle2;
		 else				    	(stall)        		-> sStall;
	@sCycle2 if(stallReg == 1) then			(awaithandshake)	-> sCycle2;					
		 else 					(setLoadedValue)  	-> sStall; //And ready for the next round.
}














