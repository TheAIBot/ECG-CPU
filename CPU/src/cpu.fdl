dp CPU(
           out M_datain : ns(32);
           out M_cmd : ns(32);
           out M_datainrdy : ns(1);
           in BUS_dataout : ns(32);
           in BUS_dataoutrdy : ns(1)
           //in stall_cpu : ns(1)
       )
{
	sig useMem : ns(1);
	sig stall : ns(1);
	sig pcJMP : ns(1);
	sig pc_out : tc(32);
	sig odata : tc(32);
	sig ALUInstruction : ns(2);
	sig useIntermediate : ns(1);
	sig storeALU : ns(1);
	sig RW : ns(1);
	sig ALUout : tc(32);
	sig toRegister : tc(32);
	sig a : tc(32);
	sig b : tc(32);
	sig correctB : tc(32);
	sig useBus : ns(1);
	sig cacheR : ns(1);
	sig cacheW : ns(1);
	sig cacheAddress : ns(32);	
	sig cacheOut : tc(32);
	sig memoryOut : tc(32);
	sig hasDataFromMemory : ns(1);
	sig cacheDone : ns(1);
	sig CACHE_dataout : tc(32);
	sig CACHE_dataoutrdy : ns(1);
	sig MWI_dataout : tc(32);
	sig MWI_dataoutrdy : ns(1);
	sig enableBus : ns(1);
	sig enableCache : ns(1);
	sig enableMwiFilter : ns(1);
	sig mwiDatain : tc(32);
	sig CACHE_datain : tc(32);
	sig CACHE_datainrdy : ns(1);
	sig MWI_datain : tc(32);
	sig MWI_datainrdy : ns(1);
	sig BUS_datainrdy : ns(1);
	sig BUS_CMD : tc(32);
	sig BUS_datain : tc(32);

	//use shouldStall(useMem, BUS_dataoutrdy, useBus, cacheDone, stall);
	use PC(odata[0:19], pcJMP, stall, pc_out);
	use cache(cacheAddress, cacheW, cacheR, CACHE_datain, CACHE_datainrdy, CACHE_dataout, CACHE_dataoutrdy);
	use fetch(pc_out, odata);

	use decoder(odata[29:31], pcJMP, ALUInstruction, useIntermediate, storeALU, useMem, RW);

	use registerStore(hasDataFromMemory, ALUout, memoryOut, toRegister);
	use registers(odata[23:25], odata[20:22], storeALU, odata[26:28], toRegister, a, b);
	use mux_ALU_b(b, odata[0:19], useIntermediate, correctB);
	use ALU(a, correctB, ALUInstruction, ALUout);

	use mwiFilter(MWI_datain, MWI_datainrdy, MWI_dataout, MWI_dataoutrdy);

	use memoryController(odata[0:3], useMem, RW, odata[4:5], a, b, BUS_dataout, BUS_dataoutrdy, CACHE_dataout, CACHE_dataoutrdy, MWI_dataout, MWI_dataoutrdy, BUS_datainrdy, CACHE_datainrdy, MWI_datainrdy, cacheR, cacheW, cacheAddress, memoryOut, hasDataFromMemory, stall, BUS_CMD, BUS_datain, CACHE_datain, MWI_datain);

   	always
	{
   		M_datain = BUS_datain;
   		M_datainrdy = BUS_datainrdy;
		M_cmd = BUS_CMD;
		//$display($dec, "M_dataout= ", M_dataout, " M_dataoutrdy= ", M_dataoutrdy, " M_datain= ", M_datain, " M_datainrdy =", M_datainrdy, $bin, " cmd= ", M_cmd);
		//$display($dec, "cache address: ", cacheAddress, " wr: ", cacheW, " rd: ", cacheR, " idata: ", a, " odata: ", cacheOut, " memoryOut: ", memoryOut);
		//$display($dec, "a: ", a, ", b: ", b);
        //$display($bin, "instruction: ", odata);
        //$display($bin, "stall: ", stall);
		//$display($dec, "cycle: ", $cycle);
		//$display($dec, "M_datain: ", M_datain, " M_datainrdy: ", M_datainrdy, " BUS_dataout: ", BUS_dataout, $bin, " CMD: ", M_cmd);
		//$display($dec, " ");
	}       
}
