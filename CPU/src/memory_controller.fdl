dp busBlock(in reset : ns(1);
			in activity : ns(1);
			in dataoutrdy : ns(1);
			in dataout : tc(32);
			out valueArrived : ns(1);
			out value : tc(32);
			out datainrdy : ns(1))
{
	reg active : ns(1);
	reg enabled : ns(1);

	reg receivedValue : ns(1);
	reg storedValue : tc(32);

	sig tempreceivedValue : ns(1);
	sig tempstoredValue : tc(32);

	always
	{
		tempreceivedValue = (dataoutrdy) ? dataoutrdy : receivedValue;
		tempstoredValue = (dataoutrdy) ? dataout : storedValue;

		receivedValue = (reset) ? 0 : tempreceivedValue;
		storedValue = (reset) ? 0 : tempstoredValue;

		valueArrived = tempreceivedValue;
		value = tempstoredValue;

		active = (active & ~reset | (active & ~(dataoutrdy | receivedValue))) ? active : activity;

		enabled = (activity) ? 1 : ~dataoutrdy & active;
		datainrdy = (activity) ? 1 : enabled;
		$display($dec, "active: ", active, " activity: ", activity, " enabled: ", enabled);
	}
}

dp cacheBlock : busBlock
dp mwiFilterBlock : busBlock

dp memoryController(in target : ns(4);
					  in useMem : ns(1);
					  in RW : ns(1);
					  in mode : ns(2);
					  in a : tc(32);
					  in b : tc(32);
					  in BUS_dataout : tc(32);
					  in BUS_dataoutrdy : ns(1);
					  in CACHE_dataout : tc(32);
					  in CACHE_dataoutrdy : ns(1);
					  in MWI_dataout : tc(32);
					  in MWI_dataoutrdy : ns(1);
					  out BUS_datainrdy : ns(1);
					  out CACHE_datainrdy : ns(1);
					  out MWI_datainrdy : ns(1);
					  out cacheR : ns(1);
					  out cacheW : ns(1);
					  out cacheAddress : ns(32);
					  out mwiDatain : tc(32);
					  out memoryOut : tc(32);
					  out hasDataFromMemory : ns(1);
					  out stall : ns(1))
{
	//modes
	//0b00 = async
	//0b01 = await
	//0b10 = stall
	lookup shouldModeStall : ns(1) = 
	{
		0b0, //async
		0b1, //await
		0b1, //stall
		0b0
	};

	lookup shouldEnable : ns(1) = 
	{
		0b1, //async
		0b0, //await
		0b1, //stall
		0b0
	};

	sig isTargetBus : ns(1);
    sig isTargetCache : ns(1);
	sig isTargetMwiFilter : ns(1);

	sig busEnable : ns(1);
	sig cacheEnable : ns(1);
	sig mwiEnable : ns(1);

	sig busReset : ns(1);
	sig cacheReset : ns(1);
	sig mwiReset : ns(1);

	sig busValueArrived : ns(1);
	sig cacheValueArrived : ns(1);
	sig mwiValueArrived : ns(1);

	sig busValue : ns(32);
	sig cacheValue : ns(32);
	sig mwiValue : ns(32);

	sig busReceivedValue : ns(1);
	sig cacheReceivedValue : ns(1);
	sig mwiReceivedValue : ns(1);

	sig stallMode : ns(2);

	sig useBus : ns(1);
	sig useCache : ns(1);
	sig useMwi : ns(1);

	use busBlock(busReset, busEnable,   BUS_dataoutrdy,   BUS_dataout,   busValueArrived,   busValue, BUS_datainrdy);
	use cacheBlock(cacheReset, cacheEnable, CACHE_dataoutrdy, CACHE_dataout, cacheValueArrived, cacheValue, CACHE_datainrdy);
	use mwiFilterBlock(mwiReset, mwiEnable,   MWI_dataoutrdy,   MWI_dataout,   mwiValueArrived,   mwiValue, MWI_datainrdy);

	always
	{
		isTargetBus =       (target == 0b0001) | (target == 0b0010) | (target == 0b0011);
		isTargetCache =     (target == 0b0100);
		isTargetMwiFilter = (target == 0b0101);

		busReceivedValue =   (isTargetBus 		& busValueArrived);
		cacheReceivedValue = (isTargetCache 	& cacheValueArrived);
		mwiReceivedValue =   (isTargetMwiFilter & mwiValueArrived);

		stallMode = shouldModeStall(mode);

		stall = useMem & stallMode & ~(busReceivedValue | cacheReceivedValue | mwiReceivedValue);

		busReset =   useMem & stallMode   & isTargetBus;
		cacheReset = useMem & stallMode & isTargetCache;
		mwiReset =   useMem & stallMode   & isTargetMwiFilter;

		useBus =   useMem & shouldEnable(mode) & isTargetBus;
		useCache = useMem & 					 isTargetCache;
		useMwi =   useMem & shouldEnable(mode) & isTargetMwiFilter;

		busEnable = useBus;

		cacheEnable = useCache;
		cacheR = (useCache & ~RW);
		cacheW = (useCache &  RW);
		cacheAddress = (RW) ? b : a; 

		mwiEnable = useMwi;
		mwiDatain = a;

		memoryOut = (BUS_dataoutrdy)   ? busValue : 
					(CACHE_dataoutrdy) ? cacheValue :
										 mwiValue;
		hasDataFromMemory = useMem & (busReceivedValue | cacheReceivedValue | mwiReceivedValue);



	
		$display($dec, "memoryOut: ", memoryOut, " hasDataFromMemory: ", hasDataFromMemory, " stall: ", stall, " mode: ", mode, " shouldEnable: ", shouldEnable(mode));
		$display($dec, "BUS_dataout:   ", BUS_dataout, " BUS_dataoutrdy:   ", BUS_dataoutrdy, " reset: ", busReset, " BUS_datainrdy:   ", BUS_datainrdy, " BUS_enable:   ", busEnable);
		$display($dec, "CACHE_dataout: ", CACHE_dataout, " CACHE_dataoutrdy: ", CACHE_dataoutrdy, " reset: ", cacheReset, " CACHE_datainrdy: ", CACHE_datainrdy, " CACHE_enable: ", cacheEnable);
		$display($dec, "MWI_dataout:   ", MWI_dataout, " MWI_dataoutrdy:   ", MWI_dataoutrdy, " reset: ", mwiReset, " MWI_datainrdy:   ", MWI_datainrdy, " MWI_enable:   ", mwiEnable);
	}
}













