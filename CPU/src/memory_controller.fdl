dp rsflipflop_size_1(in set : ns(1);
			  		 in input : ns(1);
					 in reset : ns(1);
					 out output : ns(1))
{
	reg storing : ns(1);
	sig i : ns(1);
	always
	{
		i = 	 (reset  & set)?  0:
				 (reset  & ~set)? 0:
				 (~reset & set)? input: storing;	
		storing = i;
		output = (reset  & set)? input:
				 (reset  & ~set)? 0   :
				 (~reset & set)? input: storing;	
	}
}

dp rsflipflop_size_32(in set : ns(1);
			  		 in input : tc(32);
					 in reset : ns(1);
					 out output : tc(32))
{
	reg storing : tc(32);
	sig i : tc(32);
	always
	{
		i = 	 (reset  & set)?  0:
				 (reset  & ~set)? 0:
				 (~reset & set)? input: storing;
		storing = i;
		output = (reset  & set)? input:
				 (reset  & ~set)? 0   :
				 (~reset & set)? input: storing;
					
	}
}

//busBlock rsflipflops
dp rsflipflop1_size_1 : rsflipflop_size_1
dp rsflipflop1_size_32 : rsflipflop_size_32
dp rsflipflop2_size_1 : rsflipflop_size_1
dp rsflipflop2_size_32 : rsflipflop_size_32

//cacheBlock rsflipflops
dp rsflipflop3_size_1 : rsflipflop_size_1
dp rsflipflop3_size_32 : rsflipflop_size_32

//mwiFilterBlock rsflipflops
dp rsflipflop4_size_1 : rsflipflop_size_1
dp rsflipflop4_size_32 : rsflipflop_size_32


dp busBlock(in reset : ns(1);
			in set : ns(1);
			in dataoutrdy : ns(1);
			in dataout : tc(32);
			in idatain : tc(32);
			in icmd : tc(32);
			out valueArrived : ns(1);
			out value : tc(32);
			out datainrdy : ns(1);
			out odatain : tc(32);
			out ocmd : ns(32))
{
	//output
	use rsflipflop1_size_1( set, 1,       dataoutrdy, datainrdy);
	use rsflipflop_size_32( set, idatain, dataoutrdy, odatain);
	use rsflipflop1_size_32(set, icmd,    dataoutrdy, ocmd);

	//input
	use rsflipflop2_size_1(dataoutrdy, 1,       reset, valueArrived);
	use rsflipflop2_size_32(dataoutrdy, dataout, reset, value);

	always
	{
		//$display($dec, "busBlock rdy     ", "set: ", dataoutrdy, " input: ", 1, " reset: ", reset, " output: ", valueArrived);
		//$display($dec, "busBlock dataout ", "set: ", dataoutrdy, " input: ", dataout, " reset: ", reset, " output: ", value);
		//$display($dec, "busBlock datain  ", "set: ", set, " input: ", idatain, " reset: ", dataoutrdy, " output: ", odatain);
	}
}

dp cacheBlock(in reset : ns(1);
			in set : ns(1);
			in dataoutrdy : ns(1);
			in dataout : tc(32);
			in idatain : tc(32);
			out valueArrived : ns(1);
			out value : tc(32);
			out datainrdy : ns(1);
			out odatain : tc(32))
{
	//input
	use rsflipflop3_size_1(dataoutrdy, 1,       reset, valueArrived);
	use rsflipflop3_size_32(dataoutrdy, dataout, reset, value);

	always
	{
		datainrdy = set;
		odatain = idatain;
		//$display($dec, "active: ", active, " activity: ", activity, " enabled: ", enabled);
	}
}

dp mwiFilterBlock(in reset : ns(1);
			in set : ns(1);
			in dataoutrdy : ns(1);
			in dataout : tc(32);
			in idatain : tc(32);
			out valueArrived : ns(1);
			out value : tc(32);
			out datainrdy : ns(1);
			out odatain : tc(32))
{
	//input
	use rsflipflop4_size_1(dataoutrdy, 1,       reset, valueArrived);
	use rsflipflop4_size_32(dataoutrdy, dataout, reset, value);

	always
	{
		datainrdy = set;
		odatain = idatain;
		//$display($dec, "active: ", active, " activity: ", activity, " enabled: ", enabled);
	}
}

dp busCMD(in target : ns(4);
		  in RW : ns(1);
		  in address : ns(32);
		  out M_CMD : ns(32))
{
	always
	{
		M_CMD = target # RW # address[0:26];
	}
}

dp memoryController(in target : ns(4);
					  in useMem : ns(1);
					  in RW : ns(1);
					  in mode : ns(2);
					  in a : tc(32);
					  in b : tc(32);
					  in BUS_dataout : tc(32);
					  in BUS_dataoutrdy : ns(1);
					  in CACHE_dataout : tc(32);
					  in CACHE_dataoutrdy : ns(1);
					  in MWI_dataout : tc(32);
					  in MWI_dataoutrdy : ns(1);
					  out BUS_datainrdy : ns(1);
					  out CACHE_datainrdy : ns(1);
					  out MWI_datainrdy : ns(1);
					  out cacheR : ns(1);
					  out cacheW : ns(1);
					  out cacheAddress : ns(32);
					  out memoryOut : tc(32);
					  out hasDataFromMemory : ns(1);
					  out stall : ns(1);
					  out BUS_CMD : tc(32);
					  out BUS_datain : tc(32);
					  out CACHE_datain : tc(32);
					  out MWI_datain : tc(32))
{
	//modes
	//0b00 = async
	//0b01 = await
	//0b10 = stall
	lookup shouldModeStall : ns(1) = 
	{
		0b0, //async
		0b1, //await
		0b1, //stall
		0b0
	};

	lookup shouldEnable : ns(1) = 
	{
		0b1, //async
		0b0, //await
		0b1, //stall
		0b0
	};

	sig isTargetBus : ns(1);
    sig isTargetCache : ns(1);
	sig isTargetMwiFilter : ns(1);

	sig busEnable : ns(1);
	sig cacheEnable : ns(1);
	sig mwiEnable : ns(1);

	sig busReset : ns(1);
	sig cacheReset : ns(1);
	sig mwiReset : ns(1);

	sig busValueArrived : ns(1);
	sig cacheValueArrived : ns(1);
	sig mwiValueArrived : ns(1);

	sig busValue : ns(32);
	sig cacheValue : ns(32);
	sig mwiValue : ns(32);

	sig busReceivedValue : ns(1);
	sig cacheReceivedValue : ns(1);
	sig mwiReceivedValue : ns(1);

	sig stallMode : ns(2);

	sig useBus : ns(1);
	sig useCache : ns(1);
	sig useMwi : ns(1);

	sig internBusCmd : tc(32);

	use busBlock(busReset, busEnable, BUS_dataoutrdy, BUS_dataout, a, internBusCmd, busValueArrived, busValue, BUS_datainrdy, BUS_datain, BUS_CMD);


	use cacheBlock(cacheReset, cacheEnable, CACHE_dataoutrdy, CACHE_dataout, a, cacheValueArrived, cacheValue, CACHE_datainrdy, CACHE_datain);

	use mwiFilterBlock(mwiReset, mwiEnable, MWI_dataoutrdy, MWI_dataout, a, mwiValueArrived, mwiValue, MWI_datainrdy, MWI_datain);



	use busCMD(target, RW, b, internBusCmd);

	always
	{
		isTargetBus =       (target == 0b0001) | (target == 0b0010) | (target == 0b0011) | (target == 0b0101);//(*)
		isTargetCache =     (target == 0b0100);
		isTargetMwiFilter = (target == 0b0110); //(*)Temp set to 6 instead of 5

		busReceivedValue =   (isTargetBus 		& busValueArrived);
		cacheReceivedValue = (isTargetCache 	& cacheValueArrived);
		mwiReceivedValue =   (isTargetMwiFilter & mwiValueArrived);

		stallMode = shouldModeStall(mode);

		stall = useMem & stallMode & ~(busReceivedValue | cacheReceivedValue | mwiReceivedValue);

		busReset =   useMem & stallMode   & isTargetBus;
		cacheReset = useMem & stallMode   & isTargetCache;
		mwiReset =   useMem & stallMode   & isTargetMwiFilter;

		useBus =   useMem & shouldEnable(mode) & isTargetBus;
		useCache = useMem & 			 isTargetCache;
		useMwi =   useMem & shouldEnable(mode) & isTargetMwiFilter;

		busEnable = useBus;

		cacheEnable = useCache;
		cacheR = (useCache & ~RW);
		cacheW = (useCache &  RW);
		cacheAddress = (RW) ? b : a; 

		mwiEnable = useMwi;

		memoryOut = (busReceivedValue)   ? busValue : 
					(cacheReceivedValue) ? cacheValue :
										 mwiValue;
		hasDataFromMemory = useMem & (busReceivedValue | cacheReceivedValue | mwiReceivedValue);



	
		//$display($dec, "memoryOut: ", memoryOut, " hasDataFromMemory: ", hasDataFromMemory, " stall: ", stall, " mode: ", mode, " shouldEnable: ", shouldEnable(mode));
		//$display($dec, "BUS_dataout:   ", BUS_dataout, " BUS_dataoutrdy:   ", BUS_dataoutrdy, " reset: ", busReset, " BUS_datainrdy:   ", BUS_datainrdy, " BUS_enable:   ", busEnable);
		//$display($dec, "CACHE_dataout: ", CACHE_dataout, " CACHE_dataoutrdy: ", CACHE_dataoutrdy, " reset: ", cacheReset, " CACHE_datainrdy: ", CACHE_datainrdy, " CACHE_enable: ", cacheEnable);
		//$display($dec, "MWI_dataout:   ", MWI_dataout, " MWI_dataoutrdy:   ", MWI_dataoutrdy, " reset: ", mwiReset, " MWI_datainrdy:   ", MWI_datainrdy, " MWI_enable:   ", mwiEnable);
	}
}












