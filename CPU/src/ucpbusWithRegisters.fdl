ipblock circularArrayBus(in address : ns(32);
                      in wr,rd : ns(1);
                      in idata : tc(32);
	              out odata : tc(32))
{
	iptype "ram";
	ipparm "size=32";
	ipparm "wl=32";
}

dp mwiFilterBus(	 in datain : tc(32);
			 in datainrdy : ns(1);
			 out dataout : tc(32);
			 out dataoutrdy : ns(1);
			 in stall : ns(1))
{
	//Input and output registers
	reg datainReg : tc(32);
	reg hasDataIn : ns (1); //Corresponds to datainrdyReg
	reg dataoutReg : tc(32); //Added(*)
	reg stallReg : ns(1);
	//reg dataoutrdyReg : ns(1); Not needed as stallReg==0 takes almost no time, which is what sets dataoutrdy

	//Registers for normal usage.
	reg difference : tc(32);
	reg formerValue : tc(32);
	reg arrayIndex : ns(5);
	reg sum : tc(32);

	sig circArrayOut : tc(32);
	sig indexPP : ns(5);	
	sig writeCircularArray : ns(1);
	sig readCircularArray : ns(1);
	sig updatedSum : tc(32);
	use circularArrayBus(indexPP,writeCircularArray,readCircularArray, datainReg, circArrayOut);

	sfg stall{//Awaits inputs.		
		//Gets the inputs.
		hasDataIn = datainrdy; //(*) Check here - if datainrdy is on for a long time, will it not run more than one time in a row?
		datainReg = datain;
		stallReg = stall;
		
		//Doesen't give the signal of a datapoints processesing being finished.
		dataoutrdy = 0;
		dataoutReg = dataoutReg;
		dataout = dataoutReg; //(*)When going from awaithandshake, one needs to make sure to give the result out twice, per the construction of the bus.
		
		//Gives the inputs to the circular array - nothing needs to be done as there are no inputs registrated as of yet.
		indexPP = arrayIndex;
		writeCircularArray = 0;
		readCircularArray = 0;
	}
	sfg awaitNoStall{ //Writes the new datapoint to memory, and calculates the difference from the old one
		//Functionality: Calculates the difference to be added to the sum.
		difference = datainReg - formerValue;
		
		//For the final state machine. stall is used in the comming cycles/states.
		hasDataIn = datainrdy;
		stallReg = stall;

		//Doesen't give the signal of a datapoints processesing being finished.
		dataoutrdy = 0;
		dataoutReg = dataoutReg;
		dataout = dataoutReg;
		
		//Writes the new data point to the memory/circular array.
		indexPP = arrayIndex;
		writeCircularArray = 1;
		readCircularArray = 0;
	}
	sfg addSumShift{  //Does the calculation possible before it can give the results when the bus stop's givning the stall signal.
		//Updates the sum
		updatedSum = sum + difference;
		sum = updatedSum; 
		//Bitshifts the updated sum.
		dataoutReg = (tc(32))updatedSum[5:31];
		dataout = dataoutReg; //Sends the result out: needs one cycle to update.
		
		hasDataIn = datainrdy; 
		stallReg = stall;
		dataoutrdy = 0; //This sfg must have been run, before the sum is updated, and thus it can give it to the bus. Hence dataoutrdy=0.
		
		//(*) Setting former value - see diagram
		//Increments the index for the next element in the circular array/memory. Automaticly bitshifted as the size is 5 bits.
		indexPP = arrayIndex + 1;
		arrayIndex = indexPP;	
		//Begins loading the next element to be inserted in formerValue, as this takes 2 cycles.	
		writeCircularArray = 0;
		readCircularArray = 1;
	} sfg awaithandshake{ //Awaits the handshake.	

		//Continues setting the state shift variables. (*)
		hasDataIn = datainrdy;		
		stallReg = stall;
		dataoutrdy = (stallReg == 0); //stallReg==0 means that the output can be delivered.
		dataout = dataoutReg;

		formerValue = circArrayOut; //Sets the former value. Can continue to set this as readCircularArray here is =1

		//circularArrayBus needs to get it's inputs
		writeCircularArray = 0;
		readCircularArray = 1; //Forklar hvorfor denne (*)
		indexPP = arrayIndex;	
	}
	always
	{		
		//$display("");	
		//$display($dec, "Cycle = ", $cycle);
		//$display($dec, "In UCP, input/outputs, datain = ", datain, ", datainrdy = ", datainrdy, ", dataout = ", dataout, ", dataoutrdy = ", dataoutrdy, ", stall = ", stall);
		//$display($dec, "In UCP, input/output registers, hasDataIn = ", hasDataIn, ", datainReg = ", datainReg, ", dataoutReg = ", dataoutReg, ", stallReg = ", stallReg);
		//$display($dec, "Also in UCP, difference = ", difference, ", formerValue = ", formerValue, ", arrayIndex = ", arrayIndex, ", sum = ", sum, ", circArrayOut = ",circArrayOut, ", indexPP = ", indexPP);
		//$display("");

	}
}

fsm ucpBus(mwiFilterBus){
	initial sStall;
	state sCycle2,sCycle3, sCycle4;
	
	@sStall  if(hasDataIn)     then 		(awaitNoStall) 		-> sCycle2;
		 else				    	(stall)        		-> sStall;
	@sCycle2 		         		(addSumShift)		-> sCycle3;
	@sCycle3 if(stallReg == 1) then			(awaithandshake)	-> sCycle3;					
		 else 					(awaithandshake) 	-> sStall; //And ready for the next round.
}














